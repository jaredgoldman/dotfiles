# ~/.bashrc
export HISTSIZE=-1
export HISTFILESIZE=-1

# Keychain
eval $(keychain --eval --quiet id_ed25519_gh id_rsa_do id_ed25519_osf)

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

alias ls='ls --color=auto'
alias grep='grep --color=auto'
PS1='[\u@\h \W]\$ '

# Allow sbin for executables
export PATH="/user/sbin:$PATH"

# Node
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# pnpm
export PNPM_HOME="/home/jgarch/.local/share/pnpm"

case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# -- Aliases -- #

# Virtual env
alias pyenv="source env/bin/activate"

# NVIM
alias vim="nvim"

# Networking
alias resetiptables="sudo iptables -F && sudo iptables -X && sudo iptables -t nat -F && sudo iptables -t nat -X && sudo iptables -t mangle -F && sudo iptables -t mangle -X && sudo iptables -P INPUT ACCEPT && sudo iptables -P FORWARD ACCEPT && sudo iptables -P OUTPUT ACCEPT"
alias whichwanip="dig +short myip.opendns.com @resolver1.opendns.com"

# Brightness
alias brightness="xrandr --output eDP-1 --brightness"

# OSF
# TODO: Update these ÓÅî
## Deploy CDK Locally
alias buildcdk="cdk synth --output=./cdk.out.local"
alias runcdk="sam local start-api -t ./cdk.out.local/admin-core.template.json --env-vars env.json"

## Deploy DDK
alias deploycdk="pnpm i && (cd fe && pnpm i --frozen-lockfile && pnpm run build) && pnpm run cdk deploy --all --require-approval never"


# -- Functions-- #

## Spansih translations
function ts() {
    input=$1
    trans es:en "$input"
}

function te() {
    input=$1
    trans en:es "$input"
}

## Delete old git branches
function delete_old_branches() {
    local branch last_commit
    local months_ago=${1:-3} # Default to 3 months if no argument is provided.

    git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) %(committerdate:iso8601)' | while read branch last_commit; do
        if [[ $(date -d "$last_commit" +%s) -lt $(date -d "$months_ago months ago" +%s) ]]; then
            echo "Deleting old branch $branch last committed on $last_commit"
            git branch -D "$branch"
        fi
    done
}

## Print userful docker commands
function print_docker_commads() {
    cat <<EOF
-- Docker god commands --
# delete all containers
sudo docker rm $(docker ps -aq) -f"
# delete all images
echo docker rmi $(docker images -q) -f"
EOF
}

## Simple git commit shorcut
function gc () {
    git add .
    git commit -m "$1"
    git push
}

## Shortcut for pulling specific files from development
function gcod () {
    ## check if development branch exists
    ## if not use develop
    git fetch origin
    git checkout origin/development "$1"
}

generate_ssh_key() {
    # Prompt for a custom string to append to the filename
    read -p "Enter a custom string to append to the key filename: " custom_string

    # Define the key file names
    private_key="~/.ssh/id_ed25519_$custom_string"
    public_key="~/.ssh/id_ed25519_$custom_string.pub"

    # Generate the ED25519 key pair
    ssh-keygen -t ed25519 -f "$private_key" -N ""

    # Print the public key
    echo "Public Key:"
    cat "$public_key"
}

# optimize all pngs into a single file
optpngs() {
  # prmpt user before executing
  read -p "Are you sure you want to optimize these images? [y/n]" -n 1 -r
    for file in *.png; do
        optipng -o7 "$file"
    done
}

# -- Variables -- #
export SAM_CLI_TELEMETRY=0
export EDITOR="nvim"
