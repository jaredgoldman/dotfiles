# ~/.bashrc

# Get the screen resolution of the primary display
SCREEN_RES=$(xrandr | grep -w 'connected primary' | awk '{print $4}' | sed 's/+.*//')

# -- Font -- #
# If no primary display found, fallback to the first active resolution found
if [ -z "$SCREEN_RES" ]; then
    SCREEN_RES=$(xrandr | grep '*' | awk '{print $1}')
fi

# Set font size based on screen resolution
case "$SCREEN_RES" in
    "3840x2160")
        FONT_SIZE="16"
        ;;
    "2560x1440")
        FONT_SIZE="14"
        ;;
    "1920x1080")
        FONT_SIZE="12"
        ;;
    *)
        FONT_SIZE="10"  # Default font size for unknown resolutions
        ;;
esac

# Set the I3_FONT environment variable
export FONT="pango:Fira Code $FONT_SIZE"

# -- Aliases -- #
alias ls='ls --color=auto'
alias grep='grep --color=auto'

# Virtual python env
alias pyenv="source env/bin/activate"

# Networking
alias whichwanip="dig +short myip.opendns.com @resolver1.opendns.com"

# Brightness
## Function to get the display name dynamically
get_display_name() {
  xrandr --listmonitors | grep -Po '(?<=\s)\S*(?=\s\([0-9]+)' | head -n 1
}

## Function to set the brightness
brightness() {
  local display_name=$(get_display_name)
  if [ -n "$display_name" ]; then
    xrandr --output "$display_name" --brightness "$1"
  else
    echo "No display found."
  fi
}

# Usage example:
# brightness 0.8

# -- Functions -- #

## Spanish - English translations
function ts() {
    input=$1
    trans es:en "$input"
}

## English - Spanish translations
function te() {
    input=$1
    trans en:es "$input"
}

## Delete old git branches
function delete_old_branches() {
    local branch last_commit
    local months_ago=${1:-3} # Default to 3 months if no argument is provided.

    git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short) %(committerdate:iso8601)' | while read branch last_commit; do
        if [[ $(date -d "$last_commit" +%s) -lt $(date -d "$months_ago months ago" +%s) ]]; then
            echo "Deleting old branch $branch last committed on $last_commit"
            git branch -D "$branch"
        fi
    done
}

## Function to perform an interactive rebase
irebase() {
    if [ -z "$1" ]; then
        echo "Error: No branch name provided."
        echo "Usage: irebase <branch-name>"
        return 1
    fi

    local branch_name=$1
    git rebase -i $(git merge-base "$branch_name" HEAD)
}

## Function to cherry-pick a commit
gcp() {
  git cherry-pick "$1"
}

## Function to generate an SSH key pair
function generate_ssh_key() {
    # Prompt for a custom string to append to the filename
    read -p "Enter a custom string to append to the key filename: " custom_string

    # Define the key file names
    private_key="$HOME/.ssh/id_ed25519_$custom_string"
    public_key="$HOME/.ssh/id_ed25519_$custom_string.pub"

    # Generate the ED25519 key pair
    ssh-keygen -t ed25519 -f "$private_key" -N ""

    # Print the public key
    echo "Public Key:"
    cat "$public_key"
}

## Convert all HEIC files in a dir to PNG
function heictopng() {
  for file in *.heic;
    do heif-convert "$file" "${file%.heic}.png";
  done
}

## Optimize all PNGs into a single file
function optpngs() {
  # Prompt user before executing
  read -p "Are you sure you want to optimize these images? [y/n] " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    for file in *.png; do
      optipng -o7 "$file"
    done
  fi
}

mount_remote_fs() {
  # Step 1: Prompt for SSH alias (with tab autocomplete)
  read -e -p "Enter SSH alias: " ssh_alias

  # Step 2: Create a directory with the SSH alias as its name if it doesn't exist
  local_dir="$HOME/dev/osf/$ssh_alias"
  if [ ! -d "$local_dir" ]; then
    mkdir -p "$local_dir"
    echo "Directory $local_dir created."
  fi

  # Step 3: Mount the remote filesystem
  remote_dir="/home/ec2-user"
  sshfs ec2-user@"$ssh_alias":"$remote_dir" "$local_dir"

  echo "Mounted $ssh_alias:$remote_dir to $local_dir"
}

# Function to update pkglist.txt
update_pkglist() {
  local PKGLIST="$HOME/scripts/pkglist.txt"
  local PKGLIST_PACMAN="$HOME/scripts/pkglist_pacman.txt"
  local PKGLIST_YAY="$HOME/scripts/pkglist_yay.txt"

  echo "Updating package list..."

  # List explicitly installed packages (excluding dependencies)
  if ! pacman -Qqe > "$PKGLIST_PACMAN"; then
    echo "Failed to list pacman packages"
    return 1
  fi

  # List explicitly installed AUR packages (excluding dependencies)
  if ! yay -Qqe > "$PKGLIST_YAY"; then
    echo "Failed to list AUR packages"
    return 1
  fi

  # Combine both lists, remove duplicates, and save to pkglist.txt
  if ! cat "$PKGLIST_PACMAN" "$PKGLIST_YAY" | sort -u > "$PKGLIST"; then
    echo "Failed to combine package lists"
    return 1
  fi

  # Clean up temporary files
  if ! rm "$PKGLIST_PACMAN" "$PKGLIST_YAY"; then
    echo "Failed to remove temporary files"
    return 1
  fi

  echo "Package list updated successfully!"
}

# Optionally call the function when sourcing .bashrc
# update_pkglist


# Keychain
eval $(keychain --eval --quiet id_ed25519_gh id_ed25519_osf)

# -- Variables -- #
export NVM_DIR="$HOME/.nvm"
export PNPM_HOME="$HOME/.local/share/pnpm"
export HISTSIZE=-1
export HISTFILESIZE=-1
export SAM_CLI_TELEMETRY=0
export EDITOR="nvim"
export PATH="/usr/sbin:$PATH"
export FONT="$I3_FONT"

# Load NVM and add to PATH
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# If not running interactively, don't do anything
[[ $- != *i* ]] && return
PS1='[\u@\h \W]\$ '
eval "$(starship init bash)"

